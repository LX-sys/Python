# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'video.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

'''

    下载框UI
'''


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtSignal,QThread
from PyQt5.QtWidgets import QFrame,QApplication,QMessageBox


import sys
from BiliVideoDownload import BliVideoDownlod
from QSS import QSS
import time
import os

# 获取当前操作系统
sys_ = sys.platform


# 继承线程类
class Thread(QThread):
    # 进度条信号
    Bar = pyqtSignal(int)
    # # 无法下载视频时发送信号
    textName = pyqtSignal(str)
    # 下载成功或者失败的信号
    downSOrF = pyqtSignal(int)
    '''
    0:下载失败的信号
    1:下载成功的信号
    2:无法下载的信号
    '''
    def __init__(self,ui,bv:BliVideoDownlod,url:str,vNumber=1,typ=0):
        '''

        :param ui: 界面
        :param bv: BiliVideoDownload的对象
        :param url: 下载的BV号
        :param typ: 将下载和进度条 分开
        '''
        # # print("...1")
        # 线程开关
        self.switch = True
        self._typ = typ
        self._url = url
        self._vNumber = vNumber
        self._down = bv  # type:BliVideoDownlod
        self._ui = ui    # type:Video
        super(Thread, self).__init__()


    # 线程执行方法
    def run(self) -> None:
        # # print("线程开始执行")

        if self.switch:
            # # print("v:")
            # 发送信号
            if not self._typ:
                if self._down.main(self._url, vNumber=self._vNumber):
                    # 下载完成的信号
                    self.downSOrF[int].emit(1)
                    # self._ui.videoWidgetName('<span style="font-size: 12px;color: blue;">%s:<span>'%self._down.getVideoTile())
                    # self._ui.progressBar.setValue(100)
                    # self._ui.text_down.setText("下载完成")
                else:
                    # pass
                    # self._ui.text_down.setText("下载失败")
                    # 下载失败的信息
                    self.downSOrF[int].emit(0)
            else:
                while True:
                    num = self._down.percentage()
                    # title = self._down.getVideoTile()
                    self.Bar[int].emit(num)
                    time.sleep(0.1)
                    # self.sleep(1)
                    if self._ui.progressBar.value() == 100:
                        break
            try:
                pass
            except Exception as e:
                # print("--编号001错误--")
                # print(e)
                # 无法下载的信息
                self.downSOrF[int].emit(2)






class Video(QFrame):
    # 自定义视频排序信号
    sequence = pyqtSignal(str)

    def __init__(self,url,*args,**kwargs):
        super(Video, self).__init__(*args,**kwargs)
        self._down = BliVideoDownlod(user_agent=sys_)
        self._url = url
        self._vNumber = 1
        # # print(url)
        if type(url) == tuple:
            self._url = url[0]
            self._vNumber = url[1]
        # 样式
        self.__qss = QSS()
        # 开始/暂停
        self._OK = True
        self._setupUi()


    # 返回下载视频对象
    def downOBJ(self)->BliVideoDownlod:
        return self._down


    def _setupUi(self):
        self.setObjectName("Frame")
        self.resize(600, 128)
        self.setMinimumWidth(400)
        self.setMinimumHeight(128)
        self.setMaximumHeight(128)
#         qss = '''
#         QWidget{
# 	border-radius: 6px;
# 	border-image:url(%s/test2.jpg);
# }
# QWidget:hover{
# 	border: 2px solid #357892;
# 	border-image:url(%s/test2.jpg);
# }

# QPushButton,QLabel,QComboBox,QProgressBar{
# 	background-color: rgba(255, 255, 255, 0);
# 	border-image:none;
# }

# QPushButton:hover,QLabel:hover,QComboBox:hover{
# 	border:none;
# 	border-image:none;
# }
# QProgressBar:hover{
# border-image:none;
# }
# '''%(os.getcwd(),os.getcwd())
#         self.setStyleSheet(qss)
	self.backgroundColor()
        self.progressBar = QtWidgets.QProgressBar(self)
        self.progressBar.setGeometry(QtCore.QRect(1, 86, 571, 23))
        self.progressBar.setMinimumSize(QtCore.QSize(0, 0))
        self.progressBar.setStyleSheet("QProgressBar:hover{\n"
"    border:none;\n"
"}")
        self.progressBar.setProperty("value", 0)
        self.progressBar.setAlignment(QtCore.Qt.AlignCenter)
        self.progressBar.setTextVisible(True)
        self.progressBar.setOrientation(QtCore.Qt.Horizontal)
        self.progressBar.setInvertedAppearance(False)
        self.progressBar.setTextDirection(QtWidgets.QProgressBar.TopToBottom)
        self.progressBar.setObjectName("progressBar")
        self.setting = QtWidgets.QPushButton(self)
        self.setting.setGeometry(QtCore.QRect(532, 104, 40, 21))
        self.setting.setStyleSheet(self.__qss.videoSetingButton())
        self.setting.setObjectName("setting")
        self.close_ = QtWidgets.QPushButton(self)
        self.close_.setGeometry(QtCore.QRect(550, 5, 15, 15))
        self.close_.setStyleSheet(self.__qss.videoCloseButton())
        self.close_.setObjectName("close_")
        self.comboBox = QtWidgets.QComboBox(self)
        self.comboBox.setGeometry(QtCore.QRect(240, 107, 101, 21))
        self.comboBox.setStyleSheet(self.__qss.videoComboBox())
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.start = QtWidgets.QPushButton(self)
        self.start.setGeometry(QtCore.QRect(1, 104, 41, 21))
        self.start.setStyleSheet("")
        self.start.setObjectName("start")
        self.text_down = QtWidgets.QLabel(self)
        self.text_down.setGeometry(QtCore.QRect(100, 107, 58, 16))
        self.text_down.setStyleSheet("")
        self.text_down.setObjectName("text_down")

        self.name = QtWidgets.QLabel(self)
        self.name.setGeometry(QtCore.QRect(3, 2, 500, 16))
        self.name.setStyleSheet("")
        self.name.setObjectName("name")
        self.name.setText("")

        # 设置背景图片
        # self.setBackPs()

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)
        self.start.setStyleSheet(self.__qss.videoStopButton())

        self._Url()
        self.start.clicked.connect(self._ok)
        self.close_.clicked.connect(self._close_)
        self.comboBox.currentIndexChanged.connect(self.test)
    
    def test(self,i):
        if i == 0:
            self._down.setIsBase(False)
        elif i == 1:
            self._down.setIsBase(True)


    # 更新进度条
    def setBar(self,v):
        self.progressBar.setValue(v)
        # # print("进度条：",v)

    # 无法下载
    def setText(self,signal:str):
        # print("----------------->",signal)
        if signal == 1:
            self.videoWidgetName('<span style="font-size: 12px;color: blue;">%s:<span>' % self._down.getVideoTile())
            self.progressBar.setValue(100)
            self.text_down.setText("下载完成")
            pass
        elif signal == 0:
            self.text_down.setText("下载失败")
            pass
        elif signal == 2:
            self.text_down.setText("<span style='font-size: 11px;color:red;'>%s</span>"%"无法下载")

    # 获取 url
    def _Url(self):
        # 0 1 分别代表视频和音频
        self.__t = Thread(self, self._down,self._url,self._vNumber, 0)
        self.__t1 = Thread(self, self._down,self._url,self._vNumber, 1)
        self.__t1.Bar[int].connect(self.setBar)
        self.__t.downSOrF[int].connect(self.setText)
        # self.__t1.textName[str].connect(self.setText)
        self.__t.start()
        self.__t1.start()




    # 封装信息框
    def _information(self, title: str = "标题", text: str = "消息"):
        '''
                   EG:
                    if qm == QMessageBox.Yes:
                        pass
                    else:
                        pass
        '''
        qm = QMessageBox.information(QFrame(),  # 使用infomation信息框
                                         title,
                                         text,
                                         QMessageBox.Yes | QMessageBox.No)
        return qm

    # 开始/暂停
    def _ok(self):
        unDown = "<span style='font-size: 11px;color:red;'>无法下载</span>"
        if self._OK and self.text_down.text() != unDown:
            self.__t.switch = False
            self.start.setStyleSheet(self.__qss.videoStartButton())
            self.text_down.setText("<span style='font-size: 11px;color:black;'>暂停中...</span>")
            self._down.setStop(False)
            self._OK = False
        elif self.text_down.text() != unDown:
            self.__t.switch = True
            self.start.setStyleSheet(self.__qss.videoStopButton())
            self.text_down.setText("<span style='font-size: 11px;color:black'>下载中...</span>")
            self._down.setStop(True)
            self._OK = True

    # 关闭视频
    def _close_(self):
        qm = self._information(title="关闭",text="确定关闭")
        if qm == QMessageBox.Yes:
            self._down.setCloseDown(True)
            # 当下载被关闭时,给主窗口发送信号
            self.sequence[str].emit("发送信号")
            self.close()



    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("Frame", "Frame"))
        self.setting.setText(_translate("Frame", ""))
        self.close_.setText(_translate("Frame", ""))
        self.comboBox.setItemText(0,"默认输出")
        self.comboBox.setItemText(1, _translate("Frame", "输入音频"))
        self.start.setText(_translate("Frame", ""))
        self.text_down.setText(_translate("Frame", "<span style='font-size: 11px;color:black'>下载中...</span>"))

    # 鼠标按下事件
    def mousePressEvent(self, a0: QtGui.QMouseEvent) -> None:
        # # print("鼠标按下")
        self._ok()
        # # # print(self.width(),self.height())

    # 给主窗口改变子窗口的外部接口
    def myrsize(self,w:int):
        '''
        主窗口调用
        :param w: 宽度
        :return:
        '''
        self.resize(w,128)

    # 设置小视频窗口名称,给主窗口调用
    def videoWidgetName(self,name:str):
        '''
        主窗口调用
        :param name: 视频名称
        :return:
        '''
        self.name.setText(name)

    # 设置背景颜色(随机生成),给主窗口调用
    def backgroundColor(self,imagePath:str="test2.jpg"):
        import random
        if "." in imagePath:
            qss = '''
                            QWidget{
                    	border-radius: 6px;
                    	border-image:url(%s);
                    }
                    QWidget:hover{
                    	border: 2px solid #357892;
                    	border-image:url(%s);
                    }
                    ''' % (imagePath, imagePath)
        else:
            qss = '''
                            QWidget{
                    	border-radius: 6px;
                    	background-color: rgb(%d, %d, %d);
                    }
                    QWidget:hover{
                    	border: 2px solid #357892;
                    	background-color: rgb(%d, %d, %d);
                    }
                    ''' % (random.randint(0,244),random.randint(0,244),random.randint(0,244),
                           random.randint(0,244),random.randint(0,244),random.randint(0,244))

        qss_='''
        QPushButton,QLabel,QComboBox,QProgressBar{
        	background-color: rgba(255, 255, 255, 0);
        	border-image:none;
        }

        QPushButton:hover,QLabel:hover,QComboBox:hover{
        	border:none;
        	border-image:none;
        }
        QProgressBar:hover{
        border-image:none;
    }
        '''
        qss += qss_
        self.setStyleSheet(qss)

    # 窗口改变
    def resizeEvent(self, e: QtGui.QResizeEvent) -> None:
        # 跟随窗口大小而变化位置
        self.setting.move(self.width()-self.setting.width()+8,104)
        self.close_.move(self.width()-self.setting.width()+20,5)
        self.comboBox.move(self.width()//2-50,105)
        self.progressBar.setGeometry(QtCore.QRect(1, 86, self.width(), 23))
        self.text_down.move(int(self.width()*0.17),107)


        # # # print(self.width(),self.setting.width(),self.width()-self.setting.width())



if __name__ == '__main__':
    app = QApplication(sys.argv)

    # 测试下载
    ui = Video("1nK4y1W7h8")
    ui.show()

    sys.exit(app.exec_())
